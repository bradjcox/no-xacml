package noxacml.xacml2;

import noxacml.util.Fault;

public class Xacml2Types
{
	public Type getType(String noxName)
	{
		Type t = Type.valueOf(noxName);
		if (t == null)
			throw new Fault("Type not found: "+noxName);
		return t;
	}
	public BagType getBagType(String noxName)
	{
		BagType t = BagType.valueOf(noxName);
		if (t == null)
			throw new Fault("BagType not found: "+noxName);
		return t;
	}
	public Function getFunction(String noxName, Type type)
	{
		return null;
	}

	public enum Type
	{
		ToDo(BagType.AnyURIBag, new Function[] {
				Function.not,
				Function.and,
				Function.or,

				Function.map,
				Function.nOf,
				Function.floor,
				Function.round,

				Function.allOf,
				Function.allOfAll,
				Function.allOfAny,
				Function.anyOf,
				Function.anyOfAll,
				Function.anyOfAny,

				Function.xpathNodeCount,
				Function.xpathNodeEqual,
				Function.xpathNodeMatch,

				Function.regexpStringMatch,
				Function.dnsNameRegexpMatch,
				Function.ipAddressRegexpMatch,
				Function.urlStringConcatenate,
		}),
		AnyURI(BagType.AnyURIBag, new Function[] {
				Function.anyURIEqual,
				Function.anyURIIsIn,
				Function.anyURIRegexpMatch,
		}),
		Base64Binary(BagType.Base64BinaryBag, new Function[] {
				Function.base64BinaryEqual,
				Function.base64BinaryIsIn,
		}),
		DayTimeDuration(BagType.DayTimeDurationBag, new Function[] {
				Function.dayTimeDurationEqual,
				Function.dayTimeDurationIsIn,
				Function.dayTimeDurationOneAndOnly,
		}),
		HexBinary(BagType.HexBinaryBag, new Function[] {
				Function.hexBinaryAtLeastOneMemberOf,
				Function.hexBinaryEqual,
				Function.hexBinaryIsIn,
		}),
		Rfc822Name(BagType.Rfc822NameBag, new Function[] {
				Function.rfc822NameAtLeastOneMemberOf,
				Function.rfc822NameEqual,
				Function.rfc822NameIsIn,
				Function.rfc822NameMatch,
				Function.rfc822NameRegexpMatch,
		}),
		Rfc892Name(BagType.Rfc892NameBag, new Function[] {
				Function.rfc892NameIsIn,
		}),
		Date(BagType.DateBag, new Function[] {
				Function.dateAddYearMonthDuration,
				Function.dateAtLeastOneMemberOf,
				Function.dateEqual,
				Function.dateGreaterThan,
				Function.dateGreaterThanOrEqual,
				Function.dateIsIn,
				Function.dateLessThan,
				Function.dateLessThanOrEqual,
				Function.dateSubtractYearMonthDuration,
		}),
		DateTime(BagType.DateTimeBag, new Function[] {
				Function.dateTimeAddDayTimeDuration,
				Function.dateTimeAddYearMonthDuration,
				Function.dateTimeAtLeastOneMemberOf,
				Function.dateTimeEqual,
				Function.dateTimeGreaterThan,
				Function.dateTimeGreaterThanOrEqual,
				Function.dateTimeIsIn,
				Function.dateTimeLessThan,
				Function.dateTimeLessThanOrEqual,
				Function.dateTimeSubtractDayTimeDuration,
				Function.dateTimeSubtractYearMonthDuration,
		}),
		Time(BagType.TimeBag, new Function[] {
				Function.timeAtLeastOneMemberOf,
				Function.timeEqual,
				Function.timeGreaterThan,
				Function.timeGreaterThanOrEqual,
				Function.timeInRange,
				Function.timeIsIn,
				Function.timeLessThan,
				Function.timeLessThanOrEqual,
		}),
		X500Name(BagType.X500NameBag, new Function[] {
				Function.x500NameAtLeastOneMemberOf,
				Function.x500NameEqual,
				Function.x500NameIsIn,
				Function.x500NameMatch,
				Function.x500NameRegexpMatch,
		}),
		Boolean(BagType.BooleanBag, new Function[] {
				Function.booleanEqual,
				Function.booleanIsIn,
		}),
		Double(BagType.DoubleBag, new Function[] {
				Function.doubleAbs,
				Function.doubleAdd,
				Function.doubleAtLeastOneMemberOf,
				Function.doubleDivide,
				Function.doubleEqual,
				Function.doubleGreaterThan,
				Function.doubleGreaterThanOrEqual,
				Function.doubleIsIn,
				Function.doubleLessThan,
				Function.doubleLessThanOrEqual,
				Function.doubleMultiply,
				Function.doubleSubtract,
				Function.doubleToInteger,
		}),
		Integer(BagType.IntegerBag, new Function[] {
				Function.integerAbs,
				Function.integerAdd,
				Function.integerAtLeastOneMemberOf,
				Function.integerDivide,
				Function.integerEqual,
				Function.integerGreaterThan,
				Function.integerGreaterThanOrEqual,
				Function.integerIsIn,
				Function.integerLessThan,
				Function.integerLessThanOrEqual,
				Function.integerMod,
				Function.integerMultiply,
				Function.integerSubtract,
				Function.integerToDouble,
		}),
		String(BagType.StringBag, new Function[] {
				Function.stringAtLeastOneMemberOf,
				Function.stringEqual,
				Function.stringGreaterThan,
				Function.stringGreaterThanOrEqual,
				Function.stringIsIn,
				Function.stringLessThan,
				Function.stringLessThanOrEqual,
				Function.stringNormalizeSpace,
				Function.stringNormalizeToLowerCase,
				Function.stringRegexpMatch,
				Function.stringConcatenate,
		}),
		YearMonthDuration(BagType.YearMonthDurationBag, new Function[] {
				Function.yearMonthDurationEqual,
				Function.yearMonthDurationIsIn,
				Function.yearMonthDurationOneAndOnly,
		});

		final BagType bagType;
		final Function[] functions;

		Type(BagType bagType, Function[] functions)
		{
			this.bagType = bagType;
			this.functions = functions;
		}
	}

	public enum BagType
	{
		AnyURIBag(Type.AnyURI, new Function[] {
				Function.anyURIBag,
				Function.anyURIBagSize,
				Function.anyURIAtLeastOneMemberOf,
				Function.anyURIIntersection,
				Function.anyURIOneAndOnly,
				Function.anyURISetEquals,
				Function.anyURISubset,
				Function.anyURIUnion,
		}),
		Base64BinaryBag(Type.Base64Binary, new Function[] {
				Function.base64BinaryBag,
				Function.base64BinaryBagSize,
				Function.base64BinaryAtLeastOneMemberOf,
				Function.base64BinaryIntersection,
				Function.base64BinaryOneAndOnly,
				Function.base64BinarySetEquals,
				Function.base64BinarySubset,
				Function.base64BinaryUnion,
		}),
		DayTimeDurationBag(Type.DayTimeDuration, new Function[] {
				Function.dayTimeDurationBag,
				Function.dayTimeDurationBagSize,
		}),
		HexBinaryBag(Type.HexBinary, new Function[] {
				Function.hexBinaryBag,
				Function.hexBinaryBagSize,
				Function.hexBinaryIntersection,
				Function.hexBinaryOneAndOnly,
				Function.hexBinarySetEquals,
				Function.hexBinarySubset,
				Function.hexBinaryUnion,
		}),
		Rfc822NameBag(Type.Rfc822Name, new Function[] {
				Function.rfc822NameBag,
				Function.rfc822NameBagSize,
				Function.rfc822NameIntersection,
				Function.rfc822NameOneAndOnly,
				Function.rfc822NameSetEquals,
				Function.rfc822NameSubset,
				Function.rfc822NameUnion,
		}),
		Rfc892NameBag(Type.Rfc892Name, new Function[] {
				Function.rfc892NameBag,
				Function.rfc892NameBagSize,
				Function.rfc892NameOneAndOnly,
		}),
		DateBag(Type.Date, new Function[] {
				Function.dateBag,
				Function.dateBagSize,
				Function.dateIntersection,
				Function.dateOneAndOnly,
				Function.dateSetEquals,
				Function.dateSubset,
				Function.dateUnion,
		}),
		DateTimeBag(Type.DateTime, new Function[] {
				Function.dateTimeBag,
				Function.dateTimeBagSize,
				Function.dateTimeIntersection,
				Function.dateTimeOneAndOnly,
				Function.dateTimeSetEquals,
				Function.dateTimeSubset,
				Function.dateTimeUnion,
		}),
		TimeBag(Type.Time, new Function[] {
				Function.timeBag,
				Function.timeBagSize,
				Function.timeIntersection,
				Function.timeSetEquals,
				Function.timeSubset,
				Function.timeUnion,
				Function.timeOneAndOnly,
		}),
		X500NameBag(Type.X500Name, new Function[] {
				Function.x500NameBag,
				Function.x500NameBagSize,
				Function.x500NameIntersection,
				Function.x500NameOneAndOnly,
				Function.x500NameSetEquals,
				Function.x500NameSubset,
				Function.x500NameUnion,
		}),
		BooleanBag(Type.Boolean, new Function[] {
				Function.booleanBag,
				Function.booleanBagSize,
				Function.booleanAtLeastOneMemberOf,
				Function.booleanIntersection,
				Function.booleanOneAndOnly,
				Function.booleanSetEquals,
				Function.booleanSubset,
				Function.booleanUnion,
		}),
		DoubleBag(Type.Double, new Function[] {
				Function.doubleBag,
				Function.doubleBagSize,
				Function.doubleIntersection,
				Function.doubleOneAndOnly,
				Function.doubleSetEquals,
				Function.doubleSubset,
				Function.doubleUnion,
		}),
		IntegerBag(Type.Integer, new Function[] {
				Function.integerBag,
				Function.integerBagSize,
				Function.integerIntersection,
				Function.integerOneAndOnly,
				Function.integerSetEquals,
				Function.integerSubset,
				Function.integerUnion,
		}),
		StringBag(Type.String, new Function[] {
				Function.stringBag,
				Function.stringBagSize,
				Function.stringIntersection,
				Function.stringOneAndOnly,
				Function.stringSetEquals,
				Function.stringSubset,
				Function.stringUnion,
		}),
		YearMonthDurationBag(Type.YearMonthDuration, new Function[] {
				Function.yearMonthDurationBag,
				Function.yearMonthDurationBagSize,
		});

		final Type type;
		final Function[] functions;

		BagType(Type type, Function[] functions)
		{
			this.type = type;
			this.functions = functions;
		}

	}
	public enum Function
	{
		not("urn:oasis:names:tc:xacml:1.0:function:not"),
		allOf("urn:oasis:names:tc:xacml:1.0:function:all-of"),
		allOfAll("urn:oasis:names:tc:xacml:1.0:function:all-of-all"),
		allOfAny("urn:oasis:names:tc:xacml:1.0:function:all-of-any"),
		and("urn:oasis:names:tc:xacml:1.0:function:and"),
		anyOf("urn:oasis:names:tc:xacml:1.0:function:any-of"),
		anyOfAll("urn:oasis:names:tc:xacml:1.0:function:any-of-all"),
		anyOfAny("urn:oasis:names:tc:xacml:1.0:function:any-of-any"),
		anyURIAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:anyURI-at-least-one-member-of"),
		anyURIBag("urn:oasis:names:tc:xacml:1.0:function:anyURI-bag"),
		anyURIBagSize("urn:oasis:names:tc:xacml:1.0:function:anyURI-bag-size"),
		anyURIEqual("urn:oasis:names:tc:xacml:1.0:function:anyURI-equal"),
		anyURIIntersection("urn:oasis:names:tc:xacml:1.0:function:anyURI-intersection"),
		anyURIIsIn("urn:oasis:names:tc:xacml:1.0:function:anyURI-is-in"),
		anyURIOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:anyURI-one-and-only"),
		anyURISetEquals("urn:oasis:names:tc:xacml:1.0:function:anyURI-set-equals"),
		anyURISubset("urn:oasis:names:tc:xacml:1.0:function:anyURI-subset"),
		anyURIUnion("urn:oasis:names:tc:xacml:1.0:function:anyURI-union"),
		base64BinaryAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:base64Binary-at-least-one-member-of"),
		base64BinaryBag("urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag"),
		base64BinaryBagSize("urn:oasis:names:tc:xacml:1.0:function:base64Binary-bag-size"),
		base64BinaryEqual("urn:oasis:names:tc:xacml:1.0:function:base64Binary-equal"),
		base64BinaryIntersection("urn:oasis:names:tc:xacml:1.0:function:base64Binary-intersection"),
		base64BinaryIsIn("urn:oasis:names:tc:xacml:1.0:function:base64Binary-is-in"),
		base64BinaryOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:base64Binary-one-and-only"),
		base64BinarySetEquals("urn:oasis:names:tc:xacml:1.0:function:base64Binary-set-equals"),
		base64BinarySubset("urn:oasis:names:tc:xacml:1.0:function:base64Binary-subset"),
		base64BinaryUnion("urn:oasis:names:tc:xacml:1.0:function:base64Binary-union"),
		booleanAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:boolean-at-least-one-member-of"),
		booleanBag("urn:oasis:names:tc:xacml:1.0:function:boolean-bag"),
		booleanBagSize("urn:oasis:names:tc:xacml:1.0:function:boolean-bag-size"),
		booleanEqual("urn:oasis:names:tc:xacml:1.0:function:boolean-equal"),
		booleanIntersection("urn:oasis:names:tc:xacml:1.0:function:boolean-intersection"),
		booleanIsIn("urn:oasis:names:tc:xacml:1.0:function:boolean-is-in"),
		booleanOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:boolean-one-and-only"),
		booleanOneBagSize("urn:oasis:names:tc:xacml:1.0:function:boolean-one-bag-size"),
		booleanSetEquals("urn:oasis:names:tc:xacml:1.0:function:boolean-set-equals"),
		booleanSubset("urn:oasis:names:tc:xacml:1.0:function:boolean-subset"),
		booleanUnion("urn:oasis:names:tc:xacml:1.0:function:boolean-union"),
		dateAddYearMonthDuration("urn:oasis:names:tc:xacml:1.0:function:date-add-yearMonthDuration"),
		dateAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:date-at-least-one-member-of"),
		dateBag("urn:oasis:names:tc:xacml:1.0:function:date-bag"),
		dateBagSize("urn:oasis:names:tc:xacml:1.0:function:date-bag-size"),
		dateEqual("urn:oasis:names:tc:xacml:1.0:function:date-equal"),
		dateGreaterThan("urn:oasis:names:tc:xacml:1.0:function:date-greater-than"),
		dateGreaterThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:date-greater-than-or-equal"),
		dateIntersection("urn:oasis:names:tc:xacml:1.0:function:date-intersection"),
		dateIsIn("urn:oasis:names:tc:xacml:1.0:function:date-is-in"),
		dateLessThan("urn:oasis:names:tc:xacml:1.0:function:date-less-than"),
		dateLessThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:date-less-than-or-equal"),
		dateOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:date-one-and-only"),
		dateSetEquals("urn:oasis:names:tc:xacml:1.0:function:date-set-equals"),
		dateSubset("urn:oasis:names:tc:xacml:1.0:function:date-subset"),
		dateSubtractYearMonthDuration("urn:oasis:names:tc:xacml:1.0:function:date-subtract-yearMonthDuration"),
		dateUnion("urn:oasis:names:tc:xacml:1.0:function:date-union"),
		dateTimeAddDayTimeDuration("urn:oasis:names:tc:xacml:1.0:function:dateTime-add-dayTimeDuration"),
		dateTimeAddYearMonthDuration("urn:oasis:names:tc:xacml:1.0:function:dateTime-add-yearMonthDuration"),
		dateTimeAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:dateTime-at-least-one-member-of"),
		dateTimeBag("urn:oasis:names:tc:xacml:1.0:function:dateTime-bag"),
		dateTimeBagSize("urn:oasis:names:tc:xacml:1.0:function:dateTime-bag-size"),
		dateTimeEqual("urn:oasis:names:tc:xacml:1.0:function:dateTime-equal"),
		dateTimeGreaterThan("urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than"),
		dateTimeGreaterThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:dateTime-greater-than-or-equal"),
		dateTimeIntersection("urn:oasis:names:tc:xacml:1.0:function:dateTime-intersection"),
		dateTimeIsIn("urn:oasis:names:tc:xacml:1.0:function:dateTime-is-in"),
		dateTimeLessThan("urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than"),
		dateTimeLessThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:dateTime-less-than-or-equal"),
		dateTimeOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:dateTime-one-and-only"),
		dateTimeSetEquals("urn:oasis:names:tc:xacml:1.0:function:dateTime-set-equals"),
		dateTimeSubset("urn:oasis:names:tc:xacml:1.0:function:dateTime-subset"),
		dateTimeSubtractDayTimeDuration("urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-dayTimeDuration"),
		dateTimeSubtractYearMonthDuration("urn:oasis:names:tc:xacml:1.0:function:dateTime-subtract-yearMonthDuration"),
		dateTimeUnion("urn:oasis:names:tc:xacml:1.0:function:dateTime-union"),
		dayTimeDurationBag("urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag"),
		dayTimeDurationBagSize("urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-bag-size"),
		dayTimeDurationEqual("urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-equal"),
		dayTimeDurationIsIn("urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-is-in"),
		dayTimeDurationOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:dayTimeDuration-one-and-only"),
		doubleAbs("urn:oasis:names:tc:xacml:1.0:function:double-abs"),
		doubleAdd("urn:oasis:names:tc:xacml:1.0:function:double-add"),
		doubleAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:double-at-least-one-member-of"),
		doubleBag("urn:oasis:names:tc:xacml:1.0:function:double-bag"),
		doubleBagSize("urn:oasis:names:tc:xacml:1.0:function:double-bag-size"),
		doubleDivide("urn:oasis:names:tc:xacml:1.0:function:double-divide"),
		doubleEqual("urn:oasis:names:tc:xacml:1.0:function:double-equal"),
		doubleGreaterThan("urn:oasis:names:tc:xacml:1.0:function:double-greater-than"),
		doubleGreaterThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:double-greater-than-or-equal"),
		doubleIntersection("urn:oasis:names:tc:xacml:1.0:function:double-intersection"),
		doubleIsIn("urn:oasis:names:tc:xacml:1.0:function:double-is-in"),
		doubleLessThan("urn:oasis:names:tc:xacml:1.0:function:double-less-than"),
		doubleLessThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:double-less-than-or-equal"),
		doubleMultiply("urn:oasis:names:tc:xacml:1.0:function:double-multiply"),
		doubleOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:double-one-and-only"),
		doubleSetEquals("urn:oasis:names:tc:xacml:1.0:function:double-set-equals"),
		doubleSubset("urn:oasis:names:tc:xacml:1.0:function:double-subset"),
		doubleSubtract("urn:oasis:names:tc:xacml:1.0:function:double-subtract"),
		doubleToInteger("urn:oasis:names:tc:xacml:1.0:function:double-to-integer"),
		doubleUnion("urn:oasis:names:tc:xacml:1.0:function:double-union"),
		floor("urn:oasis:names:tc:xacml:1.0:function:floor"),
		hexBinaryAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:hexBinary-at-least-one-member-of"),
		hexBinaryBag("urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag"),
		hexBinaryBagSize("urn:oasis:names:tc:xacml:1.0:function:hexBinary-bag-size"),
		hexBinaryEqual("urn:oasis:names:tc:xacml:1.0:function:hexBinary-equal"),
		hexBinaryIntersection("urn:oasis:names:tc:xacml:1.0:function:hexBinary-intersection"),
		hexBinaryIsIn("urn:oasis:names:tc:xacml:1.0:function:hexBinary-is-in"),
		hexBinaryOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:hexBinary-one-and-only"),
		hexBinarySetEquals("urn:oasis:names:tc:xacml:1.0:function:hexBinary-set-equals"),
		hexBinarySubset("urn:oasis:names:tc:xacml:1.0:function:hexBinary-subset"),
		hexBinaryUnion("urn:oasis:names:tc:xacml:1.0:function:hexBinary-union"),
		integerAbs("urn:oasis:names:tc:xacml:1.0:function:integer-abs"),
		integerAdd("urn:oasis:names:tc:xacml:1.0:function:integer-add"),
		integerAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:integer-at-least-one-member-of"),
		integerBag("urn:oasis:names:tc:xacml:1.0:function:integer-bag"),
		integerBagSize("urn:oasis:names:tc:xacml:1.0:function:integer-bag-size"),
		integerDivide("urn:oasis:names:tc:xacml:1.0:function:integer-divide"),
		integerEqual("urn:oasis:names:tc:xacml:1.0:function:integer-equal"),
		integerGreaterThan("urn:oasis:names:tc:xacml:1.0:function:integer-greater-than"),
		integerGreaterThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:integer-greater-than-or-equal"),
		integerIntersection("urn:oasis:names:tc:xacml:1.0:function:integer-intersection"),
		integerIsIn("urn:oasis:names:tc:xacml:1.0:function:integer-is-in"),
		integerLessThan("urn:oasis:names:tc:xacml:1.0:function:integer-less-than"),
		integerLessThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:integer-less-than-or-equal"),
		integerMod("urn:oasis:names:tc:xacml:1.0:function:integer-mod"),
		integerMultiply("urn:oasis:names:tc:xacml:1.0:function:integer-multiply"),
		integerOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:integer-one-and-only"),
		integerSetEquals("urn:oasis:names:tc:xacml:1.0:function:integer-set-equals"),
		integerSubset("urn:oasis:names:tc:xacml:1.0:function:integer-subset"),
		integerSubtract("urn:oasis:names:tc:xacml:1.0:function:integer-subtract"),
		integerToDouble("urn:oasis:names:tc:xacml:1.0:function:integer-to-double"),
		integerUnion("urn:oasis:names:tc:xacml:1.0:function:integer-union"),
		map("urn:oasis:names:tc:xacml:1.0:function:map"),
		nOf("urn:oasis:names:tc:xacml:1.0:function:n-of"),
		or("urn:oasis:names:tc:xacml:1.0:function:or"),
		regexpStringMatch("urn:oasis:names:tc:xacml:1.0:function:regexp-string-match"),
		rfc822NameAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-at-least-one-member-of"),
		rfc822NameBag("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag"),
		rfc822NameBagSize("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-bag-size"),
		rfc822NameEqual("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-equal"),
		rfc822NameIntersection("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-intersection"),
		rfc822NameIsIn("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-is-in"),
		rfc822NameMatch("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-match"),
		rfc822NameOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-one-and-only"),
		rfc822NameSetEquals("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-set-equals"),
		rfc822NameSubset("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-subset"),
		rfc822NameUnion("urn:oasis:names:tc:xacml:1.0:function:rfc822Name-union"),
		rfc892NameBag("urn:oasis:names:tc:xacml:1.0:function:rfc892Name-bag"),
		rfc892NameBagSize("urn:oasis:names:tc:xacml:1.0:function:rfc892Name-bag-size"),
		rfc892NameIsIn("urn:oasis:names:tc:xacml:1.0:function:rfc892Name-is-in"),
		rfc892NameOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:rfc892Name-one-and-only"),
		round("urn:oasis:names:tc:xacml:1.0:function:round"),
		stringAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:string-at-least-one-member-of"),
		stringBag("urn:oasis:names:tc:xacml:1.0:function:string-bag"),
		stringBagSize("urn:oasis:names:tc:xacml:1.0:function:string-bag-size"),
		stringEqual("urn:oasis:names:tc:xacml:1.0:function:string-equal"),
		stringGreaterThan("urn:oasis:names:tc:xacml:1.0:function:string-greater-than"),
		stringGreaterThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:string-greater-than-or-equal"),
		stringIntersection("urn:oasis:names:tc:xacml:1.0:function:string-intersection"),
		stringIsIn("urn:oasis:names:tc:xacml:1.0:function:string-is-in"),
		stringLessThan("urn:oasis:names:tc:xacml:1.0:function:string-less-than"),
		stringLessThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:string-less-than-or-equal"),
		stringNormalizeSpace("urn:oasis:names:tc:xacml:1.0:function:string-normalize-space"),
		stringNormalizeToLowerCase("urn:oasis:names:tc:xacml:1.0:function:string-normalize-to-lower-case"),
		stringOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:string-one-and-only"),
		stringRegexpMatch("urn:oasis:names:tc:xacml:1.0:function:string-regexp-match"),
		stringSetEquals("urn:oasis:names:tc:xacml:1.0:function:string-set-equals"),
		stringSubset("urn:oasis:names:tc:xacml:1.0:function:string-subset"),
		stringUnion("urn:oasis:names:tc:xacml:1.0:function:string-union"),
		timeAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:time-at-least-one-member-of"),
		timeBag("urn:oasis:names:tc:xacml:1.0:function:time-bag"),
		timeBagSize("urn:oasis:names:tc:xacml:1.0:function:time-bag-size"),
		timeEqual("urn:oasis:names:tc:xacml:1.0:function:time-equal"),
		timeGreaterThan("urn:oasis:names:tc:xacml:1.0:function:time-greater-than"),
		timeGreaterThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:time-greater-than-or-equal"),
		timeInRange("urn:oasis:names:tc:xacml:1.0:function:time-in-range"),
		timeIntersection("urn:oasis:names:tc:xacml:1.0:function:time-intersection"),
		timeIsIn("urn:oasis:names:tc:xacml:1.0:function:time-is-in"),
		timeLessThan("urn:oasis:names:tc:xacml:1.0:function:time-less-than"),
		timeLessThanOrEqual("urn:oasis:names:tc:xacml:1.0:function:time-less-than-or-equal"),
		timeSetEquals("urn:oasis:names:tc:xacml:1.0:function:time-set-equals"),
		timeSubset("urn:oasis:names:tc:xacml:1.0:function:time-subset"),
		timeUnion("urn:oasis:names:tc:xacml:1.0:function:time-union"),
		x500NameAtLeastOneMemberOf("urn:oasis:names:tc:xacml:1.0:function:x500Name-at-least-one-member-of"),
		x500NameBag("urn:oasis:names:tc:xacml:1.0:function:x500Name-bag"),
		x500NameBagSize("urn:oasis:names:tc:xacml:1.0:function:x500Name-bag-size"),
		x500NameEqual("urn:oasis:names:tc:xacml:1.0:function:x500Name-equal"),
		x500NameIntersection("urn:oasis:names:tc:xacml:1.0:function:x500Name-intersection"),
		x500NameIsIn("urn:oasis:names:tc:xacml:1.0:function:x500Name-is-in"),
		x500NameMatch("urn:oasis:names:tc:xacml:1.0:function:x500Name-match"),
		x500NameOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:x500Name-one-and-only"),
		x500NameSetEquals("urn:oasis:names:tc:xacml:1.0:function:x500Name-set-equals"),
		x500NameSubset("urn:oasis:names:tc:xacml:1.0:function:x500Name-subset"),
		x500NameUnion("urn:oasis:names:tc:xacml:1.0:function:x500Name-union"),
		xpathNodeCount("urn:oasis:names:tc:xacml:1.0:function:xpath-node-count"),
		xpathNodeEqual("urn:oasis:names:tc:xacml:1.0:function:xpath-node-equal"),
		xpathNodeMatch("urn:oasis:names:tc:xacml:1.0:function:xpath-node-match"),
		yearMonthDurationBag("urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag"),
		yearMonthDurationBagSize("urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-bag-size"),
		yearMonthDurationEqual("urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-equal"),
		yearMonthDurationIsIn("urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-is-in"),
		yearMonthDurationOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:yearMonthDuration-one-and-only"),
		anyURIRegexpMatch("urn:oasis:names:tc:xacml:2.0:function:anyURI-regexp-match"),
		dnsNameRegexpMatch("urn:oasis:names:tc:xacml:2.0:function:dnsName-regexp-match"),
		ipAddressRegexpMatch("urn:oasis:names:tc:xacml:2.0:function:ipAddress-regexp-match"),
		rfc822NameRegexpMatch("urn:oasis:names:tc:xacml:2.0:function:rfc822Name-regexp-match"),
		stringConcatenate("urn:oasis:names:tc:xacml:2.0:function:string-concatenate"),
		urlStringConcatenate("urn:oasis:names:tc:xacml:2.0:function:url-string-concatenate"),
		x500NameRegexpMatch("urn:oasis:names:tc:xacml:2.0:function:x500Name-regexp-match"),
		timeOneAndOnly("urn:oasis:names:tc:xacml:1.0:function:time-one-and-only");

		final String uri;

		Function(String uri)
		{
			this.uri = uri;
		}
	}
}
